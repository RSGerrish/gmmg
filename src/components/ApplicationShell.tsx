import { useUser } from "@auth0/nextjs-auth0/client";
import { AppShell, Center, createStyles, Footer, Header, Space, Title } from "@mantine/core";
import { ReactNode, useEffect, useState } from "react";

// Components
import { FooterSimple } from "./FooterSimple";
import { HeaderMenu } from "./HeaderMenu";

// Hooks
import { useCartContext } from "../hooks/useCartContext";

const useStyles = createStyles((theme) => ({
  headerOuter: {
    borderBottom: 0,
  },
}))

type AppProps = {
  children: ReactNode;
}

export function ApplicationShell ({ children }: AppProps) {
  const { classes } = useStyles();

  const [isLoaded, setIsLoaded] = useState(false);
  const [links, setLinks] = useState<Object[]>([]);
  const [showCart, setShowCart] = useState<Boolean>(false);

  const { user, error, isLoading } = useUser();
  
  const {cart, dispatch} = useCartContext();

  useEffect(() => {
    if (typeof window === 'object') {
      // Check if document is finally loaded
      setIsLoaded(true);
    }

    if (user) {
      // Fetch list of users and check if logged in user already exists on DB
      const fetchItems = async () => {
        const response = await fetch('/api/users');
        const json = await response.json();
  
        if (response.ok) {
          for (let i = 0; i < json.length; i++) {
            // If the user already exists... 
            if (json[i].email === user.email) {
              // Set Links on Header according to if a user is logged in as admin or not
              if(json[i].admin) {
                setLinks([
                  { "link": "/about", "label": "About" },
                  { "link": "/market", "label": "Farmers Market" },
                  { "link": "/order", "label": "Order" },
                  { "link": "/dashboard", "label": "Dashboard" },
                  { "link": "/api/auth/logout", "label": "Logout" },
                ])
              }
              if(!json[i].admin) {
                setLinks([
                  { "link": "/about", "label": "About" },
                  { "link": "/market", "label": "Farmers Market" },
                  { "link": "/order", "label": "Order" },
                  { "link": "/api/auth/logout", "label": "Logout" },
                ])
              }
              // Update their last logged in date*** MUST DO

              // Check if cart items have been saved from previous session
              if (json[i].cart.length) {
                // If items exist in DB cart, then sync local cart
                dispatch({ type: 'SET_CART', payload: json[i].cart })
                return;
              }    
            }
          }
          // If the user does not already exist...
          // Update DB with user and cart data
          console.log('user does not exist in DB');
          const newUser = { "name": user.nickname, "email":user.email, "admin": false, "lastLogin": user.updated_at, "cart": cart }
          await fetch('/api/users', {
            method: 'POST',
            body: JSON.stringify(newUser),
            headers: {
              'Content-Type': 'application/json'
            }
          });
          setLinks([
            { "link": "/about", "label": "About" },
            { "link": "/market", "label": "Farmers Market" },
            { "link": "/order", "label": "Order" },
            { "link": "/api/auth/logout", "label": "Logout" },
          ])
        }
        if (!response.ok) return;
      }
      
      setShowCart(true);
      fetchItems();
    }
    
    if (!user) {
      setLinks([
        { "link": "/about", "label": "About" },
        { "link": "/market", "label": "Farmers Market" },
        { "link": "/order", "label": "Order" },
        { "link": "/api/auth/login", "label": "Login" },
        ])
    }
  }, [user])

  if (isLoading) return (
    <Center>
      <Title order={3}>Loading...</Title>
    </Center>
  )

  if (error) return (
    <Center>
      <Title order={3}>{error.message}</Title>
    </Center>
  )
  
  return(
    <>
      {isLoaded && <AppShell
        padding={32}
        header={
          <Header p="md" height={64} className={classes.headerOuter}>
            <title>GmmG</title>
            <meta name="description" content="Generated by create next app" />
            <meta name="viewport" content="width=device-width, initial-scale=1" />
            <link rel="icon" href="/favicon.ico" />
            <HeaderMenu 
              links={links}
              showCart={showCart}
            />
          </Header>
        }
        footer={
          <Footer height={100}>
            <FooterSimple 
              links={[
                { "link": "/about", "label": "About" },
                { "link": "/market", "label": "Farmers Market" },
                { "link": "/order", "label": "Order" },,
              ]}
            />
          </Footer>
        }
      >
        <Space h="xl" />
        { children }
        <Space h="xl" />
        <Space h="xl" />
        <Space h="xl" />
        <Space h="xl" />
        <Space h="xl" />
        <Space h="xl" />
      </AppShell>}
    </>
  )
}